pragma Ada_2022;
--  ==========================================================================
--  Hybrid.Version - Application Version Information
--  ==========================================================================
--  Copyright (c) 2025 Michael Gardner, A Bit of Help, Inc.
--  SPDX-License-Identifier: BSD-3-Clause
--  See LICENSE file in the project root.
--
--  ⚠️  AUTO-GENERATED FILE - DO NOT EDIT MANUALLY ⚠️
--
--  This file is automatically generated from alire.toml by:
--    tools/generate_version.py
--
--  To update the version:
--    1. Edit the "version" field in alire.toml
--    2. Run: make generate-version (or python3 tools/generate_version.py ...)
--    3. Rebuild the project
--
--  Purpose:
--    Provides version constants extracted from alire.toml (single source
--    of truth). Bootstrap reads these constants and dependency-injects
--    them into Presentation layer for --version output.
--
--  Design Notes:
--    - Version follows Semantic Versioning 2.0.0 (semver.org)
--    - Pre-release identifiers: -dev, -alpha.N, -beta.N, -rc.N
--    - Build metadata: +build.N, +commit.HASH
--  ==========================================================================

package Hybrid.Version is

   --  Semantic Version Components
   Major : constant Natural := 1;
   Minor : constant Natural := 0;
   Patch : constant Natural := 0;

   --  Pre-release identifier (e.g., "dev", "alpha.1", "beta.2", "rc.1")
   --  Empty string for stable releases
   Prerelease : constant String := "";

   --  Build metadata (e.g., "build.123", "commit.abc123")
   --  Empty string if not specified
   Build_Metadata : constant String := "";

   --  Full version string (e.g., "0.1.0-dev", "1.2.3", "2.0.0-rc.1+build.456")
   Version : constant String := "1.0.0";

   --  Short version (no build metadata): "MAJOR.MINOR.PATCH[-PRERELEASE]"
   Short_Version : constant String :=
     Major'Image & "." &
     Minor'Image & "." &
     Patch'Image &
     (if Prerelease'Length > 0 then "-" & Prerelease else "");

   --  Check if this is a pre-release version
   function Is_Prerelease return Boolean is (Prerelease'Length > 0);

   --  Check if this is a development version
   function Is_Development return Boolean is (Prerelease = "dev");

   --  Check if this is a stable release
   function Is_Stable return Boolean is (not Is_Prerelease);

end Hybrid.Version;
